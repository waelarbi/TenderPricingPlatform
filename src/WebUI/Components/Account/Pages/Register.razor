@layout EmptyLayout
@page "/Account/Register"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Infrastructure.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<style>
    .bg-gradient {
        min-height: 100vh;
        background: radial-gradient(1200px 500px at 10% -10%, rgba(99,102,241,.25), transparent 60%), radial-gradient(900px 400px at 110% 110%, rgba(16,185,129,.20), transparent 60%), linear-gradient(135deg, #1f2937 0%, #111827 100%);
    }

    .register-card {
        width: 100%;
        max-width: 520px;
        border-radius: 18px;
    }

    .brand {
        font-weight: 800;
        letter-spacing: .4px;
    }
</style>

<div class="bg-gradient d-flex align-center justify-center">
    <MudCard Class="register-card ma-6">
        <MudCardContent Class="pa-6">

            <MudStack Spacing="1" Class="mb-4">
                <MudText Typo="Typo.h5" Class="brand">Tender Pricing Platform</MudText>
                <MudText Typo="Typo.h3">Create your account</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Sign up to upload bids, match tender texts, and auto-price lines.
                </MudText>
            </MudStack>

            <StatusMessage Message="@Message" />

            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post"
                      OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudStack Spacing="2">
                    <MudStaticTextField For="@(() => Input.Email)"
                                        @bind-Value="Input.Email"
                                        Label="Email"
                                        Placeholder="name@example.com"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Email"
                                        Variant="Variant.Outlined"
                                        autocomplete="username"
                                        aria-required="true" />

                    <MudStaticTextField For="@(() => Input.Password)"
                                        @bind-Value="Input.Password"
                                        Label="Password"
                                        InputType="InputType.Password"
                                        Placeholder="••••••••"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Lock"
                                        Variant="Variant.Outlined"
                                        autocomplete="new-password"
                                        aria-required="true" />

                    <MudStaticTextField For="@(() => Input.ConfirmPassword)"
                                        @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm password"
                                        InputType="InputType.Password"
                                        Placeholder="Repeat password"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.VerifiedUser"
                                        Variant="Variant.Outlined"
                                        autocomplete="new-password"
                                        aria-required="true" />

                    <MudStaticButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     FullWidth="true"
                                     Size="Size.Large"
                                     Class="mt-2"
                                     FormAction="FormAction.Submit">
                        <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-2" />
                        Register
                    </MudStaticButton>
                </MudStack>
            </EditForm>

            <MudDivider Class="my-4" />
            @* <MudText Typo="Typo.caption" Class="mb-2" Color="Color.Secondary">
                Or continue with
            </MudText>
            <ExternalLoginPicker /> *@

            <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
                <MudText Typo="Typo.body2">
                    Already have an account?
                    <MudLink href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Sign in
                    </MudLink>
                </MudText>
            </MudStack>

        </MudCardContent>
    </MudCard>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
