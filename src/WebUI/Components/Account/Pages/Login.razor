@layout EmptyLayout
@page "/Account/Login"
@attribute [AllowAnonymous]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Infrastructure.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    .bg-gradient {
        min-height: 100vh;
        background: radial-gradient(1200px 500px at 10% -10%, rgba(99,102,241,.25), transparent 60%), radial-gradient(900px 400px at 110% 110%, rgba(16,185,129,.20), transparent 60%), linear-gradient(135deg, #1f2937 0%, #111827 100%);
    }

    .login-card {
        width: 100%;
        max-width: 480px;
        border-radius: 18px;
    }

    .brand {
        font-weight: 800;
        letter-spacing: .4px;
    }
</style>

<!-- Full-screen center -->
<div class="bg-gradient d-flex align-center justify-center">

    <MudCard Class="login-card ma-6">
        <MudCardContent Class="pa-6">

            <MudStack Spacing="1" Class="mb-4">
                <MudText Typo="Typo.h5" Class="brand">Tender Pricing Platform</MudText>
                <MudText Typo="Typo.h3">Welcome back</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Use your account credentials to continue.
                </MudText>
            </MudStack>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <MudStack Spacing="2">
                    <MudStaticTextField For="@(() => Input.Email)"
                                        @bind-Value="Input.Email"
                                        Label="Email"
                                        Placeholder="name@example.com"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Email"
                                        Variant="Variant.Outlined"
                                        autocomplete="username"
                                        aria-required="true" />

                    <MudStaticTextField For="@(() => Input.Password)"
                                        @bind-Value="Input.Password"
                                        Label="Password"
                                        InputType="InputType.Password"
                                        Placeholder="••••••••"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Lock"
                                        Variant="Variant.Outlined"
                                        autocomplete="current-password"
                                        aria-required="true" />

                    <div class="d-flex align-center justify-space-between">
                        <MudStaticCheckBox For="@(() => Input.RememberMe)"
                                           @bind-Value="Input.RememberMe"
                                           Label="Remember me" />
                        <MudLink Href="Account/ForgotPassword">Forgot password?</MudLink>
                    </div>

                    <MudStaticButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     FullWidth="true"
                                     Size="Size.Large"
                                     Class="mt-2"
                                     FormAction="FormAction.Submit">
                        <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                        Log in
                    </MudStaticButton>
                </MudStack>
            </EditForm>

            @* External providers section: hide if none configured *@
            @* <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudDivider Class="my-4" />
            </MudHidden>
            <ExternalLoginPicker /> *@

            <MudStack Row="true" Justify="Justify.Center" Class="mt-4">
                <MudText Typo="Typo.body2">
                    Don’t have an account?
                    <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Create one
                    </MudLink>
                </MudText>
            </MudStack>

        </MudCardContent>
    </MudCard>

</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required, EmailAddress] public string Email { get; set; } = "";
        [Required, DataType(DataType.Password)] public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }
}