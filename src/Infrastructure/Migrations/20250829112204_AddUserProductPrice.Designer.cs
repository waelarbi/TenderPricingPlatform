// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TenderPriceDbContext))]
    [Migration("20250829112204_AddUserProductPrice")]
    partial class AddUserProductPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ProductDescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AttributesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Category")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diameter")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Material")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SearchText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("SourceFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceRowId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Sku");

                    b.HasIndex("SourceFileId");

                    b.HasIndex("SourceRowId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductDescriptions");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.Entities.UploadedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ByteSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("HashSha256")
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<string>("OriginalFileNameNormalized")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("UploadedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContentHash")
                        .IsUnique()
                        .HasFilter("[ContentHash] IS NOT NULL AND [ContentHash] <> ''");

                    b.HasIndex("HashSha256")
                        .IsUnique()
                        .HasFilter("[HashSha256] IS NOT NULL");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Domain.Entities.UploadedRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diameter")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("JsonPayload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainCategory")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Material")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NormalizedText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Sku")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("UploadedSheetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Sku");

                    b.HasIndex("UploadedSheetId", "RowIndex")
                        .IsUnique();

                    b.ToTable("UploadedRows");
                });

            modelBuilder.Entity("Domain.Entities.UploadedRowMatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MatchDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<long>("UploadedRowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("UploadedRowId");

                    b.HasIndex("UploadedRowId", "ProductDescriptionId")
                        .IsUnique();

                    b.ToTable("UploadedRowMatches");
                });

            modelBuilder.Entity("Domain.Entities.UploadedSheet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ParseStatus")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RowCount")
                        .HasColumnType("int");

                    b.Property<string>("SheetName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("UploadedFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UploadedFileId");

                    b.ToTable("UploadedSheets");
                });

            modelBuilder.Entity("Domain.Entities.UserProductPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductDescriptionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("UserId", "ProductDescriptionId", "Currency")
                        .IsUnique();

                    b.ToTable("UserProductPrices");
                });

            modelBuilder.Entity("Domain.Entities.ProductDescription", b =>
                {
                    b.HasOne("Domain.Entities.UploadedFile", "SourceFile")
                        .WithMany()
                        .HasForeignKey("SourceFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.UploadedRow", "SourceRow")
                        .WithMany()
                        .HasForeignKey("SourceRowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SourceFile");

                    b.Navigation("SourceRow");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.UploadedRow", b =>
                {
                    b.HasOne("Domain.Entities.UploadedSheet", "UploadedSheet")
                        .WithMany("Rows")
                        .HasForeignKey("UploadedSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedSheet");
                });

            modelBuilder.Entity("Domain.Entities.UploadedRowMatch", b =>
                {
                    b.HasOne("Domain.Entities.ProductDescription", "ProductDescription")
                        .WithMany("Matches")
                        .HasForeignKey("ProductDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UploadedRow", "UploadedRow")
                        .WithMany("Matches")
                        .HasForeignKey("UploadedRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDescription");

                    b.Navigation("UploadedRow");
                });

            modelBuilder.Entity("Domain.Entities.UploadedSheet", b =>
                {
                    b.HasOne("Domain.Entities.UploadedFile", "UploadedFile")
                        .WithMany("Sheets")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("Domain.Entities.UserProductPrice", b =>
                {
                    b.HasOne("Domain.Entities.ProductDescription", "Product")
                        .WithMany()
                        .HasForeignKey("ProductDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductDescription", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.UploadedFile", b =>
                {
                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("Domain.Entities.UploadedRow", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Domain.Entities.UploadedSheet", b =>
                {
                    b.Navigation("Rows");
                });
#pragma warning restore 612, 618
        }
    }
}
